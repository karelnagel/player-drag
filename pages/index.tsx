import { Player } from "@remotion/player";
import type { NextPage } from "next";
import Head from "next/head";
import { createContext, useContext, useEffect, useState } from "react";
import { useLambda } from "../hooks/useLambda";
import { MyComposition, OneElement } from "../remotion/MyComp";
import { defaultProps, Element } from "../types/MyComp";

export const ElementContext = createContext<{
  editElement: (element: Element) => void;
  selected?: string;
  selectElement: (id: string) => void;
}>({
  editElement: (element: Element) => undefined,
  selected: undefined,
  selectElement: (id: string) => undefined,
});

const Home: NextPage = () => {
  const [props, setProps] = useState(defaultProps);
  const [text, setText] = useState(JSON.stringify(props, null, 2));
  const [selected, setSelected] = useState<string>();
  const editElement = (element: Element) => {
    const elements = props.elements.map((el) => {
      if (el.id === element.id) {
        return element;
      }
      return el;
    });
    setProps({ ...props, elements });
    setText(JSON.stringify({ ...props, elements }, null, 2));
  };
  const selectElement = (id: string) => {
    setSelected(id);
  };

  useEffect(() => {
    setProps(JSON.parse(text));
  }, [text]);

  const { renderMedia, progress, status, price, url, renderId } = useLambda("MyComp", props);
  return (
    <ElementContext.Provider value={{ editElement, selected, selectElement }}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="max-w-screen-md m-auto mb-20">
        <div className="grid grid-cols-2">
          <div className="">
            <div className="border-2">
              ELEMENTS
              {props.elements.map((element, index) => (
                <div
                  key={index}
                  className="flex justify-between"
                  onClick={() => selectElement(element.id)}
                  style={{ background: selected === element.id ? "red" : "white" }}
                >
                  <p>{element.id}</p>
                  <p>{element.type}</p>
                </div>
              ))}
              <div>
                <button
                  onClick={() =>
                    setProps((p) => {
                      const id = (Math.random() * 10000).toFixed(0);
                      return {
                        elements: [
                          ...p.elements,
                          {
                            id,
                            height: 200,
                            width: 200,
                            x: 100,
                            y: 100,
                            type: "image",
                            props: {
                              src: `https://picsum.photos/seed/${id}/200`,
                              borderRadius: 10,
                              objectFit: "cover",
                            },
                          },
                        ],
                      };
                    })
                  }
                >
                  Add image
                </button>
              </div>
            </div>
            <SelectedProps element={props.elements.find((e) => e.id === selected)} />
          </div>
          <Player
            component={MyComposition}
            inputProps={props}
            durationInFrames={120}
            fps={30}
            compositionHeight={1080}
            compositionWidth={1080}
            style={{ width: "100%" }}
            autoPlay
            loop
          />
        </div>

        <div className="grid grid-cols-2 h-60">
          <textarea
            name="props"
            className=" w-full bg-gray-300"
            value={text}
            onChange={(e) => setText(e.currentTarget.value)}
          />
          <div className=" flex flex-col items-center">
            <button
              onClick={renderMedia}
              disabled={status === "rendering"}
              className="rounded-lg bg-blue-400 text-white uppercase px-4 py-2 m-2 disabled:bg-gray-400"
            >
              Render
            </button>
            {status && (
              <div className="w-full items-center flex flex-col">
                <p
                  className={`uppercase text-xl font-bold  ${
                    status === "done"
                      ? "text-green-500"
                      : status === "error"
                      ? "text-red-500"
                      : "text-blue-500"
                  }`}
                >
                  {status}
                </p>
                <div className="h-8 w-full bg-gray-500 rounded-full overflow-hidden relative">
                  <div
                    className="h-full left-0 top-0 bg-green-400"
                    style={{ width: `${(progress ?? 0) * 100}%` }}
                  ></div>
                </div>
                <p>Price: {price}</p>
                {status !== "rendering" && (
                  <div className="text-green-500 space-x-4 uppercase">
                    <a href={url} target="_blank" rel="noreferrer" className="">
                      Open
                    </a>
                    <a href={url} target="_blank" rel="noreferrer" download={renderId}>
                      Download
                    </a>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
     
    </ElementContext.Provider>
  );
};
export const SelectedProps = ({ element }: { element?: Element }) => {
  const { editElement } = useContext(ElementContext);
  if (!element) return null;
  const base = ["width", "height", "x", "y"];
  return (
    <div>
      <div className="grid grid-cols-2">
        {base.map((key) => (
          <div key={key} className="flex flex-col">
            <label htmlFor={key}>{key}</label>
            <input
              type="number"
              name={key}
              id={key}
              value={(element as any)[key]}
              onChange={(e) => {
                editElement({ ...element, [key]: Number(e.currentTarget.value) });
              }}
            />
          </div>
        ))}
      </div>
      <div className="">
        {Object.keys(element.props).map((key) => {
          const value = (element.props as any)[key];
          return (
            <div key={key} className="flex flex-col">
              <label htmlFor={key}>{key}</label>
              <input
                type="text"
                id={key}
                value={value}
                onChange={(e) => {
                  editElement({
                    ...element,
                    props: { ...element.props, [key]: e.target.value } as any,
                  });
                }}
              />
            </div>
          );
        })}
      </div>
    </div>
  );
};
export default Home;
